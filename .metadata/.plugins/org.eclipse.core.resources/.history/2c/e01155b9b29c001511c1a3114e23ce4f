package application;

import java.awt.geom.Line2D;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import util.RobotUtils;
import model.Board;
import model.Coordinates;

public class Path {

	RobotUtils rUtil;
	Board board = Board.getBoardInstance();
	int goal_h=0;

	public void findPath(){

		int initial_h=RobotUtils.calulateDistance(board.getStart(), board.getGoal());		

		Coordinates currentCoordinate = board.getStart();
		while(initial_h!=0){

			boolean isColliding=isGoalVisibleFromCurrentPosition(currentCoordinate);
			//			if(isColliding)
			//				System.out.println("Draw straight line");
			//			else
			//				System.out.println("Its colliding");


		}

	}

	private boolean isGoalVisibleFromCurrentPosition(Coordinates currentNode ) {
		// TODO Auto-generated method stub
		boolean visibility = true;

		Line2D displacement = new Line2D.Double(currentNode.getX(),currentNode.getY(), board.getGoal().getX(),board.getGoal().getY());

		Iterator<?> it = board.getObstacleMap().entrySet().iterator();
		while(it.hasNext()){
			Map.Entry<Integer, List<Coordinates>> pair = (Map.Entry)it.next();
			List<Coordinates> coordinateList = pair.getValue();
			int sides=board.getObstacleMap().size();
			for(int i=0;i<sides;i++){

				if(displacement.contains(coordinateList.get(i).getX(),coordinateList.get(i).getY())){
					System.out.println("Hmmmm...");
					//					isIntersecting = true;
					//					return isIntersecting;
				} 


				Line2D line;
				if(i==sides-1)
					line = new Line2D.Double(coordinateList.get(i).getX(),coordinateList.get(i).getY(),  coordinateList.get(0).getX(), coordinateList.get(0).getY());
				else
					line = new Line2D.Double(coordinateList.get(i).getX(),coordinateList.get(i).getY(), coordinateList.get(i+1).getX(), coordinateList.get(i+1).getY());

				if(line.intersectsLine(displacement)){
					System.out.println("Intersecting!!!");
					visibility=false;
					return visibility;
				}	
			}	
		}
		return visibility;
	}	
}
