package ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JPanel;

import util.ShapeUtils;
import model.Board;
import model.Coordinates;

/**
 * Draw board positions obstacle, start and goal state on UI
 * Obstacle shape is as per user choice - Polygons and circle 
 * @author apoorva
 *
 */
public class DrawBoard extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Image robotImage;
	Board board = Board.getBoardInstance();
	Arc2D vision;

	@Override
	public void paint(Graphics g){

		super.paintComponent( g );
		Graphics2D g2d = (Graphics2D)g.create();
		loadImage();
		if(board.isFileOpen()){
			g2d.drawImage(robotImage, board.getStart().getX(), board.getStart().getY(), this);
			g2d.drawString("Goal", board.getGoal().getX(), board.getGoal().getY());


			drawObstacle(g);
			//drawObstacle(g2d);
			vision=ShapeUtils.drawArc(board.getStart(),g2d);
		}else{		
			g2d.drawImage(robotImage, 0, 400, this);
		}
		g2d.dispose();
		repaint();
		obsession();
	} 



	public void obsession(){
		if(board.isFileOpen()) intersectObstacle();
	}


	/**
	 * Draws obstacle
	 * @param g2d
	 */
	//private void drawObstacle(Graphics2D g2d) {
	private void drawObstacle(Graphics g) {
		// TODO Auto-generated method stub
		Iterator<?> it = board.getObstacleMap().entrySet().iterator();

		while(it.hasNext()){
			Map.Entry<Integer, List<Coordinates>> pair = (Map.Entry)it.next();
			List<Coordinates> coordinateList = pair.getValue();
			int sides =coordinateList.size();
			int[] polyX = new int[sides];
			int[] polyY =new int[sides];

			int counter=0;
			for(Coordinates obj:coordinateList){
				polyX[counter]=obj.getX();
				polyY[counter]=obj.getY();
				counter++;				
			}

			//g.drawPolygon(polyX, polyY, sides);	
			g.setColor(Color.GRAY);
			g.fillPolygon(polyX, polyY, sides);

			//			for(int i=0;i<sides;i++){
			//				if(i==sides-1)
			//					g2d.drawLine(coordinateList.get(i).getX(), coordinateList.get(i).getY(), coordinateList.get(0).getX(), coordinateList.get(0).getY());
			//				else
			//					g2d.drawLine(coordinateList.get(i).getX(), coordinateList.get(i).getY(), coordinateList.get(i+1).getX(), coordinateList.get(i+1).getY());
			//			}
		}
	}

	/**
	 * Draws obstacle
	 * @param vision 
	 * @param g2d
	 */
	private void intersectObstacle() {
		// TODO Auto-generated method stub
		Iterator<?> it = board.getObstacleMap().entrySet().iterator();

		while(it.hasNext()){
			Map.Entry<Integer, List<Coordinates>> pair = (Map.Entry)it.next();
			List<Coordinates> coordinateList = pair.getValue();
			int sides =coordinateList.size();
			for(int i=0;i<sides;i++){
				if(!vision.contains(coordinateList.get(i).getX(),coordinateList.get(i).getY())){
					//System.out.println("I am inside some geometry....");
					//System.out.println(coordinateList.get(i).getX());
					//System.out.println(coordinateList.get(i).getY());
				} 
				Line2D line;
				if(i==sides-1)
					line = new Line2D.Double(coordinateList.get(i).getX(),coordinateList.get(i).getY(),  coordinateList.get(0).getX(), coordinateList.get(0).getY());
				else{

					line = new Line2D.Double(coordinateList.get(i).getX(),coordinateList.get(i).getY(), coordinateList.get(i+1).getX(), coordinateList.get(i+1).getY());

					Area b =new Area(vision);
					Area c =new Area(line);
//					Area a = new Area(vision.getBounds2D());
//					a.intersect(b);
//					
					b.intersect(c);
					if(b!=null)
						System.out.println("Yes");
					b.exclusiveOr(c);
					
//					else if(vision.getBounds2D().intersectsLine(line)){
//						//						if(vision.contains((Rectangle2D) line)){
//						//System.out.println("I am inside some geometry.... yiippiie");
//						//						}
//					}
				}
			}


			//
			//			int[] polyX = new int[sides];
			//			int[] polyY =new int[sides];
			//
			//			int counter=0;
			//			for(Coordinates obj:coordinateList){
			//				//polyX[counter]=obj.getX();
			//				//polyY[counter]=obj.getY();
			//				if(vision.contains(obj.getX(), obj.getY())) System.out.println("Check");
			//
			//				//counter++;				
			//			}

		}


	}



	private Image loadImage(){
		ImageIcon robotIcon = new ImageIcon(this.getClass().getResource("/images/Robot_opt.png"));
		return robotImage = robotIcon.getImage(); 
	}
}
